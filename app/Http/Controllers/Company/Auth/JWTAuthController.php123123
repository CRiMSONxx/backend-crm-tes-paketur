<?php

namespace App\Http\Controllers\Company\Auth;

use App\Models\Company_Users;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use PHPOpenSourceSaver\JWTAuth\Facades\JWTAuth;
use PHPOpenSourceSaver\JWTAuth\Exceptions\JWTException;
use Illuminate\Support\Facades\DB;

class JWTAuthController extends \App\Http\Controllers\Controller
{
    // Company_Users registration
    // api usage
    // return json
    public function register(Request $request)
    {
        $validator = Validator::make($request->all(), [
            'cname' => 'required|string|max:255',
            'cemail' => 'required|string|email|unique:company,cemail',
            'name' => 'required|string|max:255', 
            'phone' => 'required|string|unique:company_users,phone_number',
            'email' => 'required|string|email|unique:company_users,email',
            'password' => 'required|string|min:8|confirmed',
        ]);

        if($validator->fails()){
            return response()->json($validator->errors()->toJson(), 400);
        }

        DB::beginTransaction();
        try {
            $company = DB::table('company')->insertGetId([
                'cname' => $request->cname,
                'cphone_number' => $request->phone,
                'cemail' => $request->cemail,
                'created_at' => now(),
                'updated_at' => now()
            ]);
            $company_users = Company_Users::create([
                'cid' => $company,
                'is_manager' => true,
                'name' => $request->name,
                'phone_number' => $request->phone,
                'email' => $request->email,
                'password' => $request->password, // already hashed by jwt
                'created_at' => now(),
                'updated_at' => now()
            ]);
            DB::commit();
        } catch (Exception $e) {
            DB::rollBack();
            return response()->json($e->toJson(), 400);
        }

        $token = JWTAuth::fromUser($company_users);

        return redirect(route('dashboard', absolute: false));
        // return response()->json(compact('company_users'), 201);
    }

    // Company_Users login
    public function login(Request $request)
    {
        // check if deleted since its soft delete
        if (! DB::table('company_users')->where('email', $request->email)->where('deleted_at')->first()) {
            return response()->json(['error' => 'Account access revoked : Deleted'], 500);
        }

        $credentials = $request->only('email', 'password');
        
        try {
            if (! $token = JWTAuth::attempt($credentials)) {
                return response()->json(['error' => 'Invalid credentials'], 401);
            }

            // Get the authenticated company_users.
            $company_users = auth()->user();

            // (optional) Attach the role to the token.
            $token = JWTAuth::claims(['role' => $company_users->role])->fromUser($company_users);

            return response()->json(compact('token'));
        } catch (JWTException $e) {
            return response()->json(['error' => 'Could not create token'], 500);
        }
    }

    // Get authenticated company_users
    public function getCompany_Users()
    {
        try {
            if (! $company_users = JWTAuth::parseToken()->authenticate()) {
                return response()->json(['error' => 'Company_Users not found'], 404);
            }
        } catch (JWTException $e) {
            return response()->json(['error' => 'Invalid token'], 400);
        }

        return response()->json(compact('company_users'));
    }

    // Company_Users logout
    public function logout()
    {
        JWTAuth::invalidate(JWTAuth::getToken());

        return response()->json(['message' => 'Successfully logged out']);
    }
}